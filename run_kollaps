#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 [-i <implementation>] [-m <mode>]" 1>&2
    echo "Options:" 1>&2
    echo "  -i, --implementation <implementation>   Specify the implementation (lsquic or msquic)" 1>&2
    echo "  -m, --mode <mode>                       Specify the mode (debug or test)" 1>&2
    exit 1
}

remove_experiment() {
    # Remove the experiment
    docker stack rm quicsand_testing

    while docker ps | grep -q "god"; do 
        sleep 1
    done
}

build_images() {
    # Build the images
    docker build -f dockerfiles/Dockerfile.$IMPLEMENTATION -t $IMPLEMENTATION:latest .
    docker build -f dockerfiles/Dockerfile.quicsand -t quicsand:latest . --build-arg IMPLEMENTATION="$IMPLEMENTATION"
}

prepare_environment() {
    echo "Preparing the environment..."
    docker images | awk '$1 == "<none>" {print $3}' | xargs -I {} docker rmi -f {}

    # Check if the cAdvisor container is already running
    if ! docker ps | grep -q "cadvisor"; then
        docker rm -f cadvisor
        docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:ro --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --volume=/dev/disk/:/dev/disk:ro --publish=8080:8080 --detach=true --name=cadvisor --privileged --device=/dev/kmsg gcr.io/cadvisor/cadvisor:latest
    fi

    remove_experiment
    echo "Environment prepared."
}

# Function to check if all containers are in "Ready" status
check_containers_ready() {
    local html_content
    html_content=$(curl -s http://127.0.0.1:8088/)
    local ready_count
    ready_count=$(echo "$html_content" | grep -o "<td>Ready</td>" | wc -l)
    local total_count
    total_count=$(echo "$html_content" | grep -o "<td>" | wc -l)
    total_count=$((total_count / 3)) # Each container has 3 <td> elements (Hostname, Address, Status)
    if [ "$ready_count" -eq "$total_count" ]; then
        return 0
    else
        return 1
    fi
}

run_test() {

    echo "Setting up..."

    build_images

    rm -f experiment.yaml
    # build topology
    ./KollapsDeploymentGenerator $1 -s experiment.yaml

    # Check if the node is already part of a swarm
    if ! docker info | grep -q "Swarm: active"; then
        echo "Initialize swarm before testing"
        exit 1
    fi

    # Check if the kollaps_network already exists
    if ! docker network ls | grep -q "quicsand_network"; then
        docker network create --driver=overlay --subnet=10.1.0.0/24 quicsand_network
    fi

    docker stack deploy -c experiment.yaml quicsand_testing

    while ! docker ps | grep -q "dashboard"; do
        sleep 1
    done

    sleep 5

    # Wait for all containers to be in "Ready" status
    while ! check_containers_ready; do
        sleep 2
    done

    curl http://127.0.0.1:8088/start >& /dev/null

    echo "Test started."
}

get_logs() {
    mkdir -p resources/logs
    local clients_num
    local servers_num
    clients_num=$(docker ps | grep "quicsand_testing_client" | wc -l)
    servers_num=$(docker ps | grep "quicsand_testing_server" | wc -l)

    # get files from every container
    for i in $(seq 1 $clients_num); do
        # get the container id
        container_id=$(docker ps | grep "quicsand_testing_client$i" | awk '{print $1}')
        docker cp $container_id:/app/build/client.log resources/logs/$1\_client$i.log
    done

    for i in $(seq 1 $servers_num); do
        # get the container id
        container_id=$(docker ps | grep "quicsand_testing_server" | awk '{print $1}' | sed -n "$i"p)
        docker cp $container_id:/app/build/server.log resources/logs/$1\_server$i.log
    done
}

# Default values for optional arguments
IMPLEMENTATION="msquic"
MODE="debug"

# Parse command-line arguments
while [[ "$#" -eq 0 ]]; do
    usage
done

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -i|--implementation)
            IMPLEMENTATION="$2"
            shift
            ;;
        -m|--mode)
            MODE="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option $1"
            usage
            ;;
    esac
    shift
done

# Check if the implementation is valid
if [ ! -d "implementations/$IMPLEMENTATION" ]; then
    echo "Error: Invalid implementation specified."
    usage
fi

if [ "$MODE" == "debug" ]; then

    prepare_environment
    run_test resources/topologies/low_bandwidth.xml

elif [ "$MODE" == "test" ]; then

    # Test 1: Low bandwidth
    prepare_environment
    run_test resources/topologies/low_bandwidth.xml
    sleep 35
    get_logs "low_bandwidth"

    # Test 2: High bandwidth
    prepare_environment
    run_test resources/topologies/high_bandwidth.xml
    sleep 35
    get_logs "high_bandwidth"

    # Test 3: High latency
    prepare_environment
    run_test resources/topologies/high_latency.xml
    sleep 35
    get_logs "high_latency"

else
    echo "Error: Invalid mode specified."
    usage
fi

# DEBUG

# prepare_environment

# run_test resources/topologies/low_bandwidth.xml

# TESTS 

# Test 1: Low bandwidth

# prepare_environment

# run_test resources/topologies/low_bandwidth.xml

# sleep 35

# get_logs "low_bandwidth"

# # Test 2: High bandwidth

# prepare_environment

# run_test resources/topologies/high_bandwidth.xml

# sleep 35

# get_logs "high_bandwidth"

# # Test 3: High latency

# prepare_environment

# run_test resources/topologies/high_latency.xml

# sleep 35

# get_logs "high_latency"