#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 [-i <implementation>] [-t <topology>]" 1>&2
    echo "Options:" 1>&2
    echo "  -i, --implementation <implementation>   Specify the implementation (lsquic or msquic)" 1>&2
    echo "  -t, --topology <topology>               Specify the topology file" 1>&2
    exit 1
}

# # Define the completion function
# _custom_completions() {
#     local cur=${COMP_WORDS[COMP_CWORD]}
#     local prev=${COMP_WORDS[COMP_CWORD-1]}

#     # Provide options for the -i (implementation) flag
#     if [[ "$prev" == "-i" || "$prev" == "--implementation" ]]; then
#         COMPREPLY=( $(compgen -W "lsquic msquic quiche chromium" -- "$cur") )
#         return
#     fi

#     # Provide options for the -t (topology) flag (assuming you want to autocomplete files in the current directory)
#     if [[ "$prev" == "-t" || "$prev" == "--topology" ]]; then
#         COMPREPLY=( $(compgen -f -- "$cur") )
#         return
#     fi

#     # Default completion for other words
#     COMPREPLY=( $(compgen -W "-i --implementation -t --topology -h --help" -- "$cur") )
# }

# # Register the completion function for the script
# complete -F _custom_completions run_kollaps

# Parse command-line arguments
while [[ "$#" -le 2 ]]; do
    usage
done

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -i|--implementation)
            IMPLEMENTATION="$2"
            shift
            ;;
        -t|--topology)
            TOPOLOGY="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option $1"
            usage
            ;;
    esac
    shift
done

# Check if the implementation is valid
if [ ! -d "implementations/$IMPLEMENTATION" ]; then
    echo "Error: Invalid implementation specified."
    usage
fi

# Check if the cAdvisor container is already running and remove it if necessary
if docker ps -a --format '{{.Names}}' | grep -q "^cadvisor$"; then
    echo "Removing existing cAdvisor container..."
    docker rm -f cadvisor
fi
docker run -d --name=cadvisor --network=host --privileged --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true google/cadvisor:latest

cp quicsand/src/client_"$IMPLEMENTATION"/"$IMPLEMENTATION"_build.sh quicsand/src/client/build.sh
cp quicsand/src/server_"$IMPLEMENTATION"/"$IMPLEMENTATION"_build.sh quicsand/src/server/build.sh

# # Remove all existing containers
# docker rm -f $(docker ps -qa)

docker images | awk '$1 == "quicsand_client" {print $3}' | xargs -I {} docker rmi {}
docker images | awk '$1 == "quicsand_server" {print $3}' | xargs -I {} docker rmi {}
docker images | awk '$1 == "<none>" {print $3}' | xargs -I {} docker rmi {}

# Remove the experiment
docker stack rm kollaps_example

# Remove kollaps_example containers
docker ps | grep "kollaps_example" | awk '{print $1}' | xargs -I {} docker rm -f {}

# Check if the cAdvisor container is already running and remove it if necessary
if docker ps -a --format '{{.Names}}' | grep -q "^cadvisor$"; then
    echo "Removing existing cAdvisor container..."
    docker rm -f cadvisor
fi
docker run \
			  --volume=/:/rootfs:ro \
			  --volume=/var/run:/var/run:ro \
			  --volume=/sys:/sys:ro \
			  --volume=/var/lib/docker/:/var/lib/docker:ro \
			  --publish=8080:8080 \
			  --detach=true \
			  --name=cadvisor \
			  gcr.io/cadvisor/cadvisor:latest

# Pass flags to docker-compose and start the containers
IMPLEMENTATION="$IMPLEMENTATION" docker compose build

rm -f experiment.yaml
# build topology
./KollapsDeploymentGenerator $TOPOLOGY -s experiment.yaml

# Replace the experiment.yaml without prompt
# mv -f experiment.yaml .

# Check if the node is already part of a swarm
if ! docker info | grep -q "Swarm: active"; then
    echo "Initializing Docker Swarm..."
    docker swarm init
else
    echo "Node is already part of a swarm."
fi

# Check if the kollaps_network already exists
if ! docker network ls | grep -q "kollaps_network"; then
    echo "Creating kollaps_network..."
    docker network create --driver=overlay --subnet=10.1.0.0/24 kollaps_network
else
    echo "kollaps_network already exists."
fi

docker stack deploy -c experiment.yaml kollaps_example

# # Check if the experiment is running
# while ! docker stack ps kollaps_example | grep -q "kollaps_example_dashboard"; do
#     echo "Waiting for the experiment to start..."
#     sleep 5
# done

sleep 15

#start experiment
curl http://127.0.0.1:8088/start

# check how many clients and servers are running
clients_num=$(docker ps | grep "kollaps_example_client" | wc -l)
servers_num=$(docker ps | grep "kollaps_example_server" | wc -l)

echo "Number of clients: $clients_num"
echo "Number of servers: $servers_num"

# # open all clients and servers in different terminals
for i in $(seq 1 $clients_num); do
    echo "Opening client $i"
    # get the container id
    container_id=$(docker ps | grep "kollaps_example_client$i" | awk '{print $1}')
    gnome-terminal -- bash -c "docker exec -it $container_id /bin/bash; exec bash"
done

for i in $(seq 1 $servers_num); do
    # get the container id
    container_id=$(docker ps | grep "kollaps_example_server" | awk '{print $1}' | sed -n "$i"p)
    gnome-terminal -- bash -c "docker exec -it $container_id /bin/bash; exec bash"
done

sleep 15

# get files from every container
for i in $(seq 1 $clients_num); do
    # get the container id
    container_id=$(docker ps | grep "kollaps_example_client$i" | awk '{print $1}')
    docker cp $container_id:/app/build/client.log resources/logs/client$i.log
done

for i in $(seq 1 $servers_num); do
    # get the container id
    container_id=$(docker ps | grep "kollaps_example_server" | awk '{print $1}' | sed -n "$i"p)
    docker cp $container_id:/app/build/server.log resources/logs/server$i.log
done
