#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 [-i <implementation>] [-m <mode>]" 1>&2
    echo "Options:" 1>&2
    echo "  -i, --implementation <implementation>   Specify the implementation (lsquic or msquic)" 1>&2
    echo "  -m, --mode <mode>                       Specify the mode (debug or test)" 1>&2
    exit 1
}

remove_experiment() {
    # Remove the experiment
    docker stack rm quicsand_testing

    while docker ps | grep -q "god"; do 
        sleep 1
    done
}

build_images() {
    # Build the images
    local TEST=$1
    docker build -f dockerfiles/Dockerfile.$IMPLEMENTATION -t $IMPLEMENTATION:latest .
    docker build -f dockerfiles/Dockerfile.quicsand -t quicsand:latest . --build-arg IMPLEMENTATION="$IMPLEMENTATION" --build-arg TEST=$TEST
    docker build -f dockerfiles/Dockerfile.topology_generator -t topology_generator:latest .
}

generate_topology() {
    local topology_name=$1
    docker run --rm -v "$(pwd)/resources/topologies":"/app/resources/topologies" topology_generator:latest "$topology_name"
}

prepare_environment() {
    echo "Preparing the environment..."
    docker images | awk '$1 == "<none>" {print $3}' | xargs -I {} docker rmi -f {}

    # Check if the cAdvisor container is already running
    if ! docker ps | grep -q "cadvisor"; then
        docker rm -f cadvisor
        docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:ro --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --volume=/dev/disk/:/dev/disk:ro --publish=8080:8080 --detach=true --name=cadvisor --privileged --device=/dev/kmsg gcr.io/cadvisor/cadvisor:latest
    fi

    remove_experiment
    echo "Environment prepared."
}

# Function to check if all containers are in "Ready" status
check_containers_ready() {
    local html_content
    html_content=$(curl -s http://127.0.0.1:8088/)
    local ready_count
    ready_count=$(echo "$html_content" | grep -o "<td>Ready</td>" | wc -l)
    local total_count
    total_count=$(echo "$html_content" | grep -o "<td>" | wc -l)
    total_count=$((total_count / 3)) # Each container has 3 <td> elements (Hostname, Address, Status)
    if [ "$ready_count" -eq "$total_count" ]; then
        return 0
    else
        return 1
    fi
}

run_test() {
    local topology_file=$1
    local test_name=$2
    local directory=$3
    local clients_num
    local servers_num

    echo "Setting up..."

    rm -f experiment.yaml

    generate_topology "$topology_file"

    # Check if the node is already part of a swarm
    if ! docker info | grep -q "Swarm: active"; then
        echo "Initialize swarm before testing"
        exit 1
    fi

    # Check if the kollaps_network already exists
    if ! docker network ls | grep -q "gone_net"; then
        docker network create --driver=overlay --subnet=10.1.0.0/24 gone_net
    fi

    sleep 5

    # Wait for all containers to be in "Ready" status
    while ! check_containers_ready; do
        sleep 2
    done

    clients_num=$(docker ps | grep "quicsand_testing_client" | wc -l)
    servers_num=$(docker ps | grep "quicsand_testing_server" | wc -l)
    echo "Clients: $clients_num"
    echo "Servers: $servers_num"

    curl http://127.0.0.1:8088/start >& /dev/null

    echo "Experiment started."

    sleep 2

    while true; do
        running=0
        for i in $(seq 1 $clients_num); do
            # get the container id
            container_id=$(docker ps | grep "quicsand_testing_client$i-" | awk '{print $1}')
            if [ -n "$container_id" ]; then
                if docker exec $container_id ps -A | grep "quicsand_client" > /dev/null; then
                    running=$((running + 1))
                    break
                fi
            fi
        done
        if [ $running -eq 0 ]; then
            echo "All quicsand_client scripts have finished."
            sleep 1
            break
        else
            sleep 1
        fi
    done

}

get_logs() {
    directory=$1
    mkdir -p resources/logs
    local clients_num
    local servers_num
    clients_num=$(docker ps | grep "quicsand_testing_client" | wc -l)
    servers_num=$(docker ps | grep "quicsand_testing_server" | wc -l)

    # get files from every container
    for i in $(seq 1 $clients_num); do
        # get the container id
        container_id=$(docker ps | grep "quicsand_testing_client$i-" | awk '{print $1}')
        docker cp $container_id:/app/build/client.log $directory/client$i.log
    done

    for i in $(seq 1 $servers_num); do
        # get the container id
        container_id=$(docker ps | grep "quicsand_testing_server" | awk '{print $1}' | sed -n "$i"p)
        docker cp $container_id:/app/build/server.log $directory/server$i.log
    done
}

# Parse command-line arguments
while [[ "$#" -eq 0 ]]; do
    usage
done

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -c|--config)
            CONFIG_FILE="$2"
            shift
            ;;
        -t|--topologies)
            TOPOLOGIES_FILE="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option $1"
            usage
            ;;
    esac
    shift
done

# Read the YAML file and execute the tests
IMPLEMENTATION=$(yq '.configs.globalVariables.implementation' $CONFIG_FILE | tr -d '"')
TESTS=$(yq '.tests' $CONFIG_FILE)
TOPOLOGIES=$(yq '.topologies' $TOPOLOGIES_FILE)

GONE_URL=http://gone-$(hostname):3000

# Check if the implementation is valid
if [ ! -d "implementations/$IMPLEMENTATION" ]; then
    echo "Error: Invalid implementation specified."
    usage
fi

rm -rf resources/logs/*
for TEST_KEY in $(echo "$TESTS" | yq 'keys | .[]' - | tr -d '"'); do
    for TOPOLOGY_KEY in $(echo "$TOPOLOGIES" | yq 'keys | .[]' - | tr -d '"'); do
        echo "Running test $TEST_KEY with topology $TOPOLOGY_KEY"
        prepare_environment
        build_images $TEST_KEY
        DIRECTORY=resources/logs/$TEST_KEY\_$TOPOLOGY_KEY
        mkdir -p $DIRECTORY
        run_test $TOPOLOGY_KEY $TEST_KEY $DIRECTORY
        get_logs $DIRECTORY
    done
done