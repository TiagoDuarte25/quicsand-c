#!/bin/bash

rm -rf quicsand/bin/*

# Function to display usage
usage() {
    echo "Usage: $0 [-i <implementation>]" 1>&2
    echo "Options:" 1>&2
    echo "  -i, --implementation <implementation>   Specify the implementation (lsquic or msquic or quiche or ngtcp2)" 1>&2
    echo "  -n, --num-clients <num_clients>        Specify the number of clients" 1>&2
    echo "  -t, --test <test>                      Specify the test to run (simple or ms)" 1>&2
    echo "  -h, --help                             Display this help message" 1>&2
    exit 1
}

parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

# parse config.yaml file
eval $(parse_yaml quicsand/config.yaml)

# Parse command-line arguments
while [[ "$#" -le 1 ]]; do
    usage
done

NUM_CLIENTS=1
TEST="simple"

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -i|--implementation)
            IMPLEMENTATION="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        -t|--test)
            TEST="$2"
            shift
            ;;
        -n|--num-clients)
            NUM_CLIENTS="$2"
            shift
            ;;
        *)
            echo "Error: Unknown option $1"
            usage
            ;;
    esac
    shift
done

# rm -rf build
echo "Building $IMPLEMENTATION implementation"

if [ "$IMPLEMENTATION" == "msquic" ] || [ "$IMPLEMENTATION" == "quiche" ]; then
    cmake -S . -B build -DIMPL=$IMPLEMENTATION
else
    echo "Error: Unknown implementation $IMPLEMENTATION"
    usage
fi

cd build

make

cp -r ../quicsand/config.yaml bin/
cp -r ../quicsand/certs bin/

if [ $TEST == "simple" ]; then
    gnome-terminal -- bash -c "cd bin; ./quicsand_server -c "/home/tiagoduarte25/Desktop/thesis/quicsand-c/quicsand/certs/quicsand-server.pem" -k "/home/tiagoduarte25/Desktop/thesis/quicsand-c/quicsand/certs/key.pem" -i "0.0.0.0" -p 4567; exec bash"

    sleep 2

    for i in $(seq 1 $NUM_CLIENTS); do
        gnome-terminal -- bash -c "cd bin; ./quicsand_client -i 127.0.0.1 -p 4567 -f /home/tiagoduarte25/Desktop/thesis/quicsand-c/resources/testing_files/file.txt; exec bash"
    done
elif [ $TEST == "ms" ]; then
    gnome-terminal -- bash -c "cd bin; ./quicsand_server_ms -c "/home/tiagoduarte25/Desktop/thesis/quicsand-c/quicsand/certs/quicsand-server.pem" -k "/home/tiagoduarte25/Desktop/thesis/quicsand-c/quicsand/certs/key.pem" -i "0.0.0.0" -p 4567; exec bash"

    sleep 2

    for i in $(seq 1 $NUM_CLIENTS); do
        gnome-terminal -- bash -c "cd bin; ./quicsand_client_ms -i 127.0.0.1 -p 4567 -f /home/tiagoduarte25/Desktop/thesis/quicsand-c/resources/testing_files/file.txt; exec bash"
    done
else
    echo "Error: Unknown test $TEST"
    usage
fi


