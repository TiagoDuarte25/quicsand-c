#!/bin/bash

# Function to display usage
usage() {
    echo "Usage: $0 [-c <tests> [-t <topologies>]" 1>&2
    echo "Options:" 1>&2
    echo "  -c, --tests <tests>" 1>&2
    echo "  -t, --topologies <topologies>                     " 1>&2
    exit 1
}

build_images() {
    # Build the images
    local TEST=$1
    if ! docker images | grep -q "$IMPLEMENTATION"; then
        docker build -f dockerfiles/Dockerfile.$IMPLEMENTATION -t $IMPLEMENTATION:latest .
    fi
    
    if ! docker images | grep -q "topology_generator"; then
        docker build -f dockerfiles/Dockerfile.topology_generator -t topology_generator:latest .
    fi
    
    docker build -f dockerfiles/Dockerfile.quicsand -t quicsand:latest . --build-arg IMPLEMENTATION="$IMPLEMENTATION" --build-arg TEST=$TEST --build-arg TESTS_FILE=$CONFIG_FILE
}

generate_topology() {
    local TOPOLOGY_KEY=$1
    local TEST_NAME=$2
    local CONFIG_FILE=$3
    local TOPOLOGIES_FILE=$4

    # if [ -f "resources/topologies/$1.sh" ]; then
    #     return
    # fi

    # create a random volume name dir to receive the topology file
    local DIRECTORY=$(mktemp -d "$(pwd)/tmp.XXXXXX")

    docker run --rm \
        -v "$(pwd)/$4:/app/topologies.yaml" \
        -v "/$DIRECTORY:/result" \
        --user $(id -u):$(id -g) \
        topology_generator:latest $1 $2
    
    mv -f $DIRECTORY/topology.sh resources/topologies/$1.sh

    rm -rf $DIRECTORY

    chmod +x resources/topologies/$1.sh
}

prepare_environment() {
    docker system prune -f

    echo "Preparing the environment..."
    docker images | awk '$1 == "<none>" {print $3}' | xargs -I {} docker rmi -f {}

    docker network create --driver=overlay --attachable --subnet=10.1.0.0/16 gone_net

    # grep eth0 interface inside the container beacause is eth0@...

    ./gone/start.sh -i wlp0s20f3 -N $(hostname) -P -A -n gone_net

    echo "Environment prepared."
}

run_test() {
    local TOPOLOGY_KEY=$1
    local TEST_KEY=$2
    local directory=$3
    local CONFIG_FILE=$4
    local TOPOLOGIES_FILE=$5
    local clients_num
    local servers_num

    echo "Setting up..."

    rm -rf $TEST_KEY\_$TOPOLOGY_KEY

    mkdir -p $TEST_KEY\_$TOPOLOGY_KEY

    echo "Generating the topology..."
    generate_topology $TOPOLOGY_KEY $TEST_KEY $CONFIG_FILE $TOPOLOGIES_FILE

    # Check if the node is already part of a swarm
    if ! docker info | grep -q "Swarm: active"; then
        echo "Initialize swarm before testing"
        exit 1
    fi

    # Check if the kollaps_network already exists
    if ! docker network ls | grep -q "gone_net"; then
        docker network create --driver=overlay --attachable --subnet=10.1.0.0/16 gone_net
    fi

    ./resources/topologies/${TOPOLOGY_KEY}.sh

    clients_num=$(docker ps | grep "client" | wc -l)
    servers_num=$(docker ps | grep "server" | wc -l)

    sleep 2

    while true; do
        running=0
        for i in $(seq 1 $clients_num); do
            # get the container id
            container_id=$(docker ps | grep "client" | awk '{print $1}')
            if [ -n "$container_id" ]; then
                running=$((running + 1))
                break
            fi
        done
        if [ $running -eq 0 ]; then
            echo "All quicsand_client scripts have finished."
            sleep 1
            break
        else
            sleep 1
        fi
    done

}

get_logs() {
    local DIRECTORY=$1
    local TEST_KEY=$2
    local TOPOLOGY_KEY=$3
    local clients_num
    local servers_num

    mv -f $TEST_KEY\_$TOPOLOGY_KEY/* $DIRECTORY

    rm -rf $TEST_KEY\_$TOPOLOGY_KEY
}

# Parse command-line arguments
while [[ "$#" -eq 0 ]]; do
    usage
done

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -c|--config)
            CONFIG_FILE="$2"
            shift
            ;;
        -t|--topologies)
            TOPOLOGIES_FILE="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo "Error: Unknown option $1"
            usage
            ;;
    esac
    shift
done

# Read the YAML file and execute the tests
echo "Reading the configuration file..."
IMPLEMENTATION=$(grep 'implementation:' $CONFIG_FILE | awk '{print $2}')

if ! docker ps --filter "name=neo" --format "{{.Names}}" | grep -q "^neo$"; then
    cd gone
    ./setup.sh
    cd ..
fi

# Check if the Docker image already exists
if ! docker images | grep -q "quicsand-yaml-parser"; then
    echo "Docker image 'quicsand-yaml-parser' not found. Building the image..."
    docker image build -t quicsand-yaml-parser -f dockerfiles/Dockerfile.yq .
else
    echo "Docker image 'quicsand-yaml-parser' already exists. Skipping build."
fi

rm -rf keys_$CONFIG_FILE\_$TOPOLOGIES_FILE
mkdir -p keys_$CONFIG_FILE\_$TOPOLOGIES_FILE

docker run --rm \
  -v "$(pwd)/${CONFIG_FILE}:/app/tests.yaml" \
  -v "$(pwd)/${TOPOLOGIES_FILE}:/app/topologies.yaml" \
  -v "$(pwd)/keys_${CONFIG_FILE}_${TOPOLOGIES_FILE}:/result" \
  quicsand-yaml-parser

for TEST_KEY in $(cat $(pwd)/keys_$CONFIG_FILE\_$TOPOLOGIES_FILE/tests_keys.txt); do
    for TOPOLOGY_KEY in $(cat $(pwd)/keys_$CONFIG_FILE\_$TOPOLOGIES_FILE/topologies_keys.txt); do
        echo "Running test $TEST_KEY with topology $TOPOLOGY_KEY"
        prepare_environment
        build_images $TEST_KEY
        DIRECTORY=resources/logs/$IMPLEMENTATION/$TEST_KEY\_$TOPOLOGY_KEY
        mkdir -p $DIRECTORY
        run_test $TOPOLOGY_KEY $TEST_KEY $DIRECTORY $CONFIG_FILE $TOPOLOGIES_FILE
        get_logs $DIRECTORY $TEST_KEY $TOPOLOGY_KEY
        break
    done
    break
done

rm -rf keys_$CONFIG_FILE_$TOPOLOGIES_FILE